// Generated by gencpp from file set_walk/set_kinematics.msg
// DO NOT EDIT!


#ifndef SET_WALK_MESSAGE_SET_KINEMATICS_H
#define SET_WALK_MESSAGE_SET_KINEMATICS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace set_walk
{
template <class ContainerAllocator>
struct set_kinematics_
{
  typedef set_kinematics_<ContainerAllocator> Type;

  set_kinematics_()
    : X_length(0.0)
    , Y_length(0.0)
    , Z_length(0.0)
    , R_yaw(0.0)
    , L_yaw(0.0)
    , Leg_angle(0.0)
    , PA(0.0)
    , RA(0.0)
    , flag(0.0)
    , Using_Motor_id()
    , KM_flag(0)
    , KM_flag2(0)
    , Side_flag(0)
    , Step_counter(0)
    , df_yr(0)
    , df_yl(0)
    , ankle_18(0)
    , ankle_19(0)
    , ankle_20(0)
    , ankle_21(0)
    , init_ang_zr(0)
    , init_ang_zl(0)
    , time(0)
    , swing(0)
    , ankle_14(0)
    , ankle_15(0)
    , ankle_12(0)
    , ankle_13(0){
    }
  set_kinematics_(const ContainerAllocator& _alloc)
    : X_length(0.0)
    , Y_length(0.0)
    , Z_length(0.0)
    , R_yaw(0.0)
    , L_yaw(0.0)
    , Leg_angle(0.0)
    , PA(0.0)
    , RA(0.0)
    , flag(0.0)
    , Using_Motor_id(_alloc)
    , KM_flag(0)
    , KM_flag2(0)
    , Side_flag(0)
    , Step_counter(0)
    , df_yr(0)
    , df_yl(0)
    , ankle_18(0)
    , ankle_19(0)
    , ankle_20(0)
    , ankle_21(0)
    , init_ang_zr(0)
    , init_ang_zl(0)
    , time(0)
    , swing(0)
    , ankle_14(0)
    , ankle_15(0)
    , ankle_12(0)
    , ankle_13(0){
  (void)_alloc;
    }



   typedef double _X_length_type;
  _X_length_type X_length;

   typedef double _Y_length_type;
  _Y_length_type Y_length;

   typedef double _Z_length_type;
  _Z_length_type Z_length;

   typedef double _R_yaw_type;
  _R_yaw_type R_yaw;

   typedef double _L_yaw_type;
  _L_yaw_type L_yaw;

   typedef double _Leg_angle_type;
  _Leg_angle_type Leg_angle;

   typedef double _PA_type;
  _PA_type PA;

   typedef double _RA_type;
  _RA_type RA;

   typedef double _flag_type;
  _flag_type flag;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _Using_Motor_id_type;
  _Using_Motor_id_type Using_Motor_id;

   typedef int32_t _KM_flag_type;
  _KM_flag_type KM_flag;

   typedef int32_t _KM_flag2_type;
  _KM_flag2_type KM_flag2;

   typedef int32_t _Side_flag_type;
  _Side_flag_type Side_flag;

   typedef int32_t _Step_counter_type;
  _Step_counter_type Step_counter;

   typedef int32_t _df_yr_type;
  _df_yr_type df_yr;

   typedef int32_t _df_yl_type;
  _df_yl_type df_yl;

   typedef int32_t _ankle_18_type;
  _ankle_18_type ankle_18;

   typedef int32_t _ankle_19_type;
  _ankle_19_type ankle_19;

   typedef int32_t _ankle_20_type;
  _ankle_20_type ankle_20;

   typedef int32_t _ankle_21_type;
  _ankle_21_type ankle_21;

   typedef int32_t _init_ang_zr_type;
  _init_ang_zr_type init_ang_zr;

   typedef int32_t _init_ang_zl_type;
  _init_ang_zl_type init_ang_zl;

   typedef int32_t _time_type;
  _time_type time;

   typedef int32_t _swing_type;
  _swing_type swing;

   typedef int32_t _ankle_14_type;
  _ankle_14_type ankle_14;

   typedef int32_t _ankle_15_type;
  _ankle_15_type ankle_15;

    typedef int32_t _ankle_12_type;
   _ankle_12_type ankle_12;

    typedef int32_t _ankle_13_type;
   _ankle_13_type ankle_13;






  typedef boost::shared_ptr< ::set_walk::set_kinematics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::set_walk::set_kinematics_<ContainerAllocator> const> ConstPtr;

}; // struct set_kinematics_

typedef ::set_walk::set_kinematics_<std::allocator<void> > set_kinematics;

typedef boost::shared_ptr< ::set_walk::set_kinematics > set_kinematicsPtr;
typedef boost::shared_ptr< ::set_walk::set_kinematics const> set_kinematicsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::set_walk::set_kinematics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::set_walk::set_kinematics_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace set_walk

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'set_walk': ['/home/admin/catkin_ws/src/set_walk/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::set_walk::set_kinematics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::set_walk::set_kinematics_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::set_walk::set_kinematics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::set_walk::set_kinematics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::set_walk::set_kinematics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::set_walk::set_kinematics_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::set_walk::set_kinematics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f16afc8391f0ce1087bc53458246b54f";
  }

  static const char* value(const ::set_walk::set_kinematics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf16afc8391f0ce10ULL;
  static const uint64_t static_value2 = 0x87bc53458246b54fULL;
};

template<class ContainerAllocator>
struct DataType< ::set_walk::set_kinematics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "set_walk/set_kinematics";
  }

  static const char* value(const ::set_walk::set_kinematics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::set_walk::set_kinematics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 X_length\n\
float64 Y_length\n\
float64 Z_length\n\
float64 R_yaw\n\
float64 L_yaw\n\
float64 Leg_angle\n\
float64 PA\n\
float64 RA\n\
float64 flag\n\
int32[] Using_Motor_id\n\
int32 KM_flag\n\
int32 KM_flag2\n\
int32 Side_flag\n\
int32 Step_counter\n\
int32 df_yr\n\
int32 df_yl\n\
int32 ankle_18\n\
int32 ankle_19\n\
int32 ankle_20\n\
int32 ankle_21\n\
int32 init_ang_zr\n\
int32 init_ang_zl\n\
int32 time\n\
int32 swing\n\
int32 ankle_14\n\
int32 ankle_15\n\
int32 ankle_12\n\
int32 ankle_13\n\
";
  }

  static const char* value(const ::set_walk::set_kinematics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::set_walk::set_kinematics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.X_length);
      stream.next(m.Y_length);
      stream.next(m.Z_length);
      stream.next(m.R_yaw);
      stream.next(m.L_yaw);
      stream.next(m.Leg_angle);
      stream.next(m.PA);
      stream.next(m.RA);
      stream.next(m.flag);
      stream.next(m.Using_Motor_id);
      stream.next(m.KM_flag);
      stream.next(m.KM_flag2);
      stream.next(m.Side_flag);
      stream.next(m.Step_counter);
      stream.next(m.df_yr);
      stream.next(m.df_yl);
      stream.next(m.ankle_18);
      stream.next(m.ankle_19);
      stream.next(m.ankle_20);
      stream.next(m.ankle_21);
      stream.next(m.init_ang_zr);
      stream.next(m.init_ang_zl);
      stream.next(m.time);
      stream.next(m.swing);
      stream.next(m.ankle_14);
      stream.next(m.ankle_15);
      stream.next(m.ankle_12);
      stream.next(m.ankle_13);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct set_kinematics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::set_walk::set_kinematics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::set_walk::set_kinematics_<ContainerAllocator>& v)
  {
    s << indent << "X_length: ";
    Printer<double>::stream(s, indent + "  ", v.X_length);
    s << indent << "Y_length: ";
    Printer<double>::stream(s, indent + "  ", v.Y_length);
    s << indent << "Z_length: ";
    Printer<double>::stream(s, indent + "  ", v.Z_length);
    s << indent << "R_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.R_yaw);
    s << indent << "L_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.L_yaw);
    s << indent << "Leg_angle: ";
    Printer<double>::stream(s, indent + "  ", v.Leg_angle);
    s << indent << "PA: ";
    Printer<double>::stream(s, indent + "  ", v.PA);
    s << indent << "RA: ";
    Printer<double>::stream(s, indent + "  ", v.RA);
    s << indent << "flag: ";
    Printer<double>::stream(s, indent + "  ", v.flag);
    s << indent << "Using_Motor_id[]" << std::endl;
    for (size_t i = 0; i < v.Using_Motor_id.size(); ++i)
    {
      s << indent << "  Using_Motor_id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Using_Motor_id[i]);
    }
    s << indent << "KM_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.KM_flag);
    s << indent << "KM_flag2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.KM_flag2);
    s << indent << "Side_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Side_flag);
    s << indent << "Step_counter: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Step_counter);
    s << indent << "df_yr: ";
    Printer<int32_t>::stream(s, indent + "  ", v.df_yr);
    s << indent << "df_yl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.df_yl);
    s << indent << "ankle_18: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ankle_18);
    s << indent << "ankle_19: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ankle_19);
    s << indent << "ankle_20: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ankle_20);
    s << indent << "ankle_21: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ankle_21);
    s << indent << "init_ang_zr: ";
    Printer<int32_t>::stream(s, indent + "  ", v.init_ang_zr);
    s << indent << "init_ang_zl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.init_ang_zl);
    s << indent << "time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.time);
    s << indent << "swing: ";
    Printer<int32_t>::stream(s, indent + "  ", v.swing);
    s << indent << "ankle_14: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ankle_14);
    s << indent << "ankle_15: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ankle_15);
    s << indent << "ankle_12: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ankle_12);
    s << indent << "ankle_13: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ankle_13);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SET_WALK_MESSAGE_SET_KINEMATICS_H
