/* Auto-generated by genmsg_cpp for file /home/odroid/Workspace/Motion/msg/Motion_msg.msg */
#ifndef MOTION_MESSAGE_MOTION_MSG_H
#define MOTION_MESSAGE_MOTION_MSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Motion1
{
template <class ContainerAllocator>
struct Motion_msg_ {
  typedef Motion_msg_<ContainerAllocator> Type;

  Motion_msg_()
  : Motion_Name()
  , Motion_flag2(0)
  , Using_Motor_Id()
  , KM_flag(0)
  , Waist_angle(0.0)
  {
  }

  Motion_msg_(const ContainerAllocator& _alloc)
  : Motion_Name(_alloc)
  , Motion_flag2(0)
  , Using_Motor_Id(_alloc)
  , KM_flag(0)
  , Waist_angle(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Motion_Name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Motion_Name;

  typedef uint32_t _Motion_flag2_type;
  uint32_t Motion_flag2;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _Using_Motor_Id_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  Using_Motor_Id;

  typedef int32_t _KM_flag_type;
  int32_t KM_flag;

  typedef double _Waist_angle_type;
  double Waist_angle;


  typedef boost::shared_ptr< ::Motion1::Motion_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Motion1::Motion_msg_<ContainerAllocator>  const> ConstPtr;
}; // struct Motion_msg
typedef  ::Motion1::Motion_msg_<std::allocator<void> > Motion_msg;

typedef boost::shared_ptr< ::Motion1::Motion_msg> Motion_msgPtr;
typedef boost::shared_ptr< ::Motion1::Motion_msg const> Motion_msgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Motion1::Motion_msg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Motion1::Motion_msg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Motion

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Motion1::Motion_msg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Motion1::Motion_msg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Motion1::Motion_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2a2e6df2fc047df5dd7d179fa390824f";
  }

  static const char* value(const  ::Motion1::Motion_msg_<ContainerAllocator> &) { return value(); }
  static const uint64_t static_value1 = 0x2a2e6df2fc047df5ULL;
  static const uint64_t static_value2 = 0xdd7d179fa390824fULL;
};

template<class ContainerAllocator>
struct DataType< ::Motion1::Motion_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Motion/Motion_msg";
  }

  static const char* value(const  ::Motion1::Motion_msg_<ContainerAllocator> &) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::Motion1::Motion_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string Motion_Name\n\
uint32 Motion_flag2\n\
int32[] Using_Motor_Id\n\
int32 KM_flag\n\
float64 Waist_angle\n\
\n\
";
  }

  static const char* value(const  ::Motion1::Motion_msg_<ContainerAllocator> &) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Motion1::Motion_msg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Motion_Name);
    stream.next(m.Motion_flag2);
    stream.next(m.Using_Motor_Id);
    stream.next(m.KM_flag);
    stream.next(m.Waist_angle);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Motion_msg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Motion1::Motion_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Motion1::Motion_msg_<ContainerAllocator> & v)
  {
    s << indent << "Motion_Name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Motion_Name);
    s << indent << "Motion_flag2: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Motion_flag2);
    s << indent << "Using_Motor_Id[]" << std::endl;
    for (size_t i = 0; i < v.Using_Motor_Id.size(); ++i)
    {
      s << indent << "  Using_Motor_Id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Using_Motor_Id[i]);
    }
    s << indent << "KM_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.KM_flag);
    s << indent << "Waist_angle: ";
    Printer<double>::stream(s, indent + "  ", v.Waist_angle);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MOTION_MESSAGE_MOTION_MSG_H

