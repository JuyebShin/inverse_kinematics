/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/odroid/catkin_ws/src/robocup_vision/msg/robocup_vision_msg.msg
 *
 */


#ifndef ROBOCUP_VISION_MESSAGE_ROBOCUP_VISION_MSG_H
#define ROBOCUP_VISION_MESSAGE_ROBOCUP_VISION_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robocup_vision
{
template <class ContainerAllocator>
struct robocup_vision_msg_
{
  typedef robocup_vision_msg_<ContainerAllocator> Type;

  robocup_vision_msg_()
    : BallX(0)
    , BallY(0)
    , isBallfind(false)
    , GoalpostX(0)
    , GoalpostY(0)
    , GoalpostVector(0)
    , GoalpostDist(0)
    , isGoalpostfind(false)
    , isOut(false)  {
    }
  robocup_vision_msg_(const ContainerAllocator& _alloc)
    : BallX(0)
    , BallY(0)
    , isBallfind(false)
    , GoalpostX(0)
    , GoalpostY(0)
    , GoalpostVector(0)
    , GoalpostDist(0)
    , isGoalpostfind(false)
    , isOut(false)  {
    }



   typedef int16_t _BallX_type;
  _BallX_type BallX;

   typedef int16_t _BallY_type;
  _BallY_type BallY;

   typedef uint8_t _isBallfind_type;
  _isBallfind_type isBallfind;

   typedef int16_t _GoalpostX_type;
  _GoalpostX_type GoalpostX;

   typedef int16_t _GoalpostY_type;
  _GoalpostY_type GoalpostY;

   typedef int16_t _GoalpostVector_type;
  _GoalpostVector_type GoalpostVector;

   typedef int16_t _GoalpostDist_type;
  _GoalpostDist_type GoalpostDist;

   typedef uint8_t _isGoalpostfind_type;
  _isGoalpostfind_type isGoalpostfind;

   typedef uint8_t _isOut_type;
  _isOut_type isOut;




  typedef boost::shared_ptr< ::robocup_vision::robocup_vision_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robocup_vision::robocup_vision_msg_<ContainerAllocator> const> ConstPtr;

}; // struct robocup_vision_msg_

typedef ::robocup_vision::robocup_vision_msg_<std::allocator<void> > robocup_vision_msg;

typedef boost::shared_ptr< ::robocup_vision::robocup_vision_msg > robocup_vision_msgPtr;
typedef boost::shared_ptr< ::robocup_vision::robocup_vision_msg const> robocup_vision_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robocup_vision::robocup_vision_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robocup_vision::robocup_vision_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robocup_vision

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'robocup_vision': ['/home/odroid/catkin_ws/src/robocup_vision/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robocup_vision::robocup_vision_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robocup_vision::robocup_vision_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robocup_vision::robocup_vision_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robocup_vision::robocup_vision_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robocup_vision::robocup_vision_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robocup_vision::robocup_vision_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robocup_vision::robocup_vision_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d1404c663a886db4b568a182c808d32c";
  }

  static const char* value(const ::robocup_vision::robocup_vision_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd1404c663a886db4ULL;
  static const uint64_t static_value2 = 0xb568a182c808d32cULL;
};

template<class ContainerAllocator>
struct DataType< ::robocup_vision::robocup_vision_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robocup_vision/robocup_vision_msg";
  }

  static const char* value(const ::robocup_vision::robocup_vision_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robocup_vision::robocup_vision_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 BallX\n\
int16 BallY\n\
bool  isBallfind\n\
\n\
int16 GoalpostX\n\
int16 GoalpostY\n\
int16 GoalpostVector\n\
\n\
int16 GoalpostDist\n\
\n\
bool  isGoalpostfind\n\
\n\
bool  isOut\n\
";
  }

  static const char* value(const ::robocup_vision::robocup_vision_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robocup_vision::robocup_vision_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.BallX);
      stream.next(m.BallY);
      stream.next(m.isBallfind);
      stream.next(m.GoalpostX);
      stream.next(m.GoalpostY);
      stream.next(m.GoalpostVector);
      stream.next(m.GoalpostDist);
      stream.next(m.isGoalpostfind);
      stream.next(m.isOut);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct robocup_vision_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robocup_vision::robocup_vision_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robocup_vision::robocup_vision_msg_<ContainerAllocator>& v)
  {
    s << indent << "BallX: ";
    Printer<int16_t>::stream(s, indent + "  ", v.BallX);
    s << indent << "BallY: ";
    Printer<int16_t>::stream(s, indent + "  ", v.BallY);
    s << indent << "isBallfind: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isBallfind);
    s << indent << "GoalpostX: ";
    Printer<int16_t>::stream(s, indent + "  ", v.GoalpostX);
    s << indent << "GoalpostY: ";
    Printer<int16_t>::stream(s, indent + "  ", v.GoalpostY);
    s << indent << "GoalpostVector: ";
    Printer<int16_t>::stream(s, indent + "  ", v.GoalpostVector);
    s << indent << "GoalpostDist: ";
    Printer<int16_t>::stream(s, indent + "  ", v.GoalpostDist);
    s << indent << "isGoalpostfind: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isGoalpostfind);
    s << indent << "isOut: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isOut);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOCUP_VISION_MESSAGE_ROBOCUP_VISION_MSG_H
