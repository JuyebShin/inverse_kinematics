/* Auto-generated by genmsg_cpp for file /home/odroid/Workspace/dynamixel/msg/dynamixel_msg.msg */
#ifndef DYNAMIXEL_MESSAGE_DYNAMIXEL_MSG_H
#define DYNAMIXEL_MESSAGE_DYNAMIXEL_MSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace dynamixel
{
template <class ContainerAllocator>
struct dynamixel_msg_ {
  typedef dynamixel_msg_<ContainerAllocator> Type;

  dynamixel_msg_()
  : length(0)
  , mode(0)
  , id()
  , speed()
  , position()
  , type()
  , acceleration()
  {
  }

  dynamixel_msg_(const ContainerAllocator& _alloc)
  : length(0)
  , mode(0)
  , id(_alloc)
  , speed(_alloc)
  , position(_alloc)
  , type(_alloc)
  , acceleration(_alloc)
  {
  }

  typedef int32_t _length_type;
  int32_t length;

  typedef int32_t _mode_type;
  int32_t mode;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _id_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  id;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _speed_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  speed;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _position_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  position;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _type_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  type;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _acceleration_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  acceleration;


  typedef boost::shared_ptr< ::dynamixel::dynamixel_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamixel::dynamixel_msg_<ContainerAllocator>  const> ConstPtr;
}; // struct dynamixel_msg
typedef  ::dynamixel::dynamixel_msg_<std::allocator<void> > dynamixel_msg;

typedef boost::shared_ptr< ::dynamixel::dynamixel_msg> dynamixel_msgPtr;
typedef boost::shared_ptr< ::dynamixel::dynamixel_msg const> dynamixel_msgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::dynamixel::dynamixel_msg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::dynamixel::dynamixel_msg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace dynamixel

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dynamixel::dynamixel_msg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dynamixel::dynamixel_msg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dynamixel::dynamixel_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5f00266e19a84bc6741bc79f8307ce7b";
  }

  static const char* value(const  ::dynamixel::dynamixel_msg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5f00266e19a84bc6ULL;
  static const uint64_t static_value2 = 0x741bc79f8307ce7bULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamixel::dynamixel_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamixel/dynamixel_msg";
  }

  static const char* value(const  ::dynamixel::dynamixel_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dynamixel::dynamixel_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 length\n\
int32 mode\n\
int32[] id\n\
int32[] speed\n\
int32[] position\n\
int32[] type\n\
int32[] acceleration\n\
";
  }

  static const char* value(const  ::dynamixel::dynamixel_msg_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dynamixel::dynamixel_msg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.length);
    stream.next(m.mode);
    stream.next(m.id);
    stream.next(m.speed);
    stream.next(m.position);
    stream.next(m.type);
    stream.next(m.acceleration);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct dynamixel_msg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamixel::dynamixel_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::dynamixel::dynamixel_msg_<ContainerAllocator> & v) 
  {
    s << indent << "length: ";
    Printer<int32_t>::stream(s, indent + "  ", v.length);
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.id[i]);
    }
    s << indent << "speed[]" << std::endl;
    for (size_t i = 0; i < v.speed.size(); ++i)
    {
      s << indent << "  speed[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.speed[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "type[]" << std::endl;
    for (size_t i = 0; i < v.type.size(); ++i)
    {
      s << indent << "  type[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.type[i]);
    }
    s << indent << "acceleration[]" << std::endl;
    for (size_t i = 0; i < v.acceleration.size(); ++i)
    {
      s << indent << "  acceleration[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.acceleration[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // DYNAMIXEL_MESSAGE_DYNAMIXEL_MSG_H

